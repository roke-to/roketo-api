name: Deploy prod [mainnet]
on:
  workflow_dispatch:

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  build:
    runs-on:
      - self-hosted
      - Linux

    strategy:
      matrix:
        app:
          - rocketo-dapp-api-mainnet
        registry:
          - gcr.io/main-project-354317
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.REGISTRY_JSON }}
      - name: Get tag name
        uses: little-core-labs/get-git-tag@v3.0.1
        id: tag-name
      - name: Get short sha
        uses: benjlevesque/short-sha@v1.2
        id: short-sha
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF_NAME##*/})"
        id: extract_branch
      - name: Set docker tags
        env:
          TAG_NAME: ${{ steps.tag-name.outputs.tag }}
          APP: ${{ matrix.app }}
          REG: ${{ matrix.registry }}
          SHORT_SHA: ${{ steps.short-sha.outputs.sha }}
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
        run: |
          export GIT_BRANCH=${{env.GIT_BRANCH}}
          echo 'DOCKER_TAGS<<EOF' >> $GITHUB_ENV
          if [ "$GIT_BRANCH" == "master" ] || [ "$GIT_BRANCH" == "main" ]; then
            echo "$REG/$APP:latest"
            echo "$REG/$APP:main-$SHORT_SHA"
          elif [ "$TAG_NAME" != "" ]; then
            echo "$REG/$APP:$TAG_NAME"
          else
            echo "$REG/$APP:$GIT_BRANCH"
            echo "$REG/$APP:branch-$GIT_BRANCH-$SHORT_SHA"
          fi >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          if [ "$GIT_BRANCH" == "master" ] || [ "$GIT_BRANCH" == "main" ]; then
            echo 'BUILD_ARG_VITE_NEAR_NETWORK_ID=mainnet' >> $GITHUB_ENV
          else
            echo 'BUILD_ARG_VITE_NEAR_NETWORK_ID=mainnet' >> $GITHUB_ENV
          fi
      - name: Build and push image
        uses: docker/build-push-action@v2
        with:
          context: .
#          build-args: BUILD_ARG_VITE_NEAR_NETWORK_ID=${{ env.BUILD_ARG_VITE_NEAR_NETWORK_ID }}
          push: true
          tags: ${{ env.DOCKER_TAGS }}
          file: ./Dockerfile

  publish:
    needs:
      - build
    runs-on:
      - self-hosted
      - Linux

    strategy:
      matrix:
        app:
          - rocketo-dapp-api-mainnet
        registry:
          - gcr.io/main-project-354317

    steps:
      - uses: actions/checkout@v2
      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.REGISTRY_JSON }}
      - name: Get tag name
        uses: little-core-labs/get-git-tag@v3.0.1
        id: tag-name
      - name: Get short sha
        uses: benjlevesque/short-sha@v1.2
        id: short-sha
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF_NAME##*/})"
        id: extract_branch
      - name: Set envs
        shell: bash
        env:
          TAG_NAME: ${{ steps.tag-name.outputs.tag }}
          APP: ${{ matrix.app }}
          REG: ${{ matrix.registry }}
          SHORT_SHA: ${{ steps.short-sha.outputs.sha }}
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF_NAME##*/})"
          export TAG_NAME=${{env.TAG_NAME}}
          export APP=${{env.APP}}
          export SHORT_SHA=${{env.SHORT_SHA}}
          export GIT_BRANCH=${{env.GIT_BRANCH}}
          if [ "$GIT_BRANCH" == "master" ] || [ "$GIT_BRANCH" == "main" ]; then
            echo "##[set-output name=app_name;]$(echo $APP)"
            echo "##[set-output name=app_hostname;]$(echo $APP.ares.roke.to)"
            echo "##[set-output name=app_tag;]$(echo main-$SHORT_SHA)"
          elif [ "$TAG_NAME" != "" ]; then
            echo "##[set-output name=app_tag;]$(echo main-$TAG_NAME)"
          else
            echo "##[set-output name=app_name;]$(echo $APP-branch-$GIT_BRANCH)"
            echo "##[set-output name=app_hostname;]$(echo $APP-branch-$GIT_BRANCH.ares.roke.to)"
            echo "##[set-output name=app_tag;]$(echo branch-$GIT_BRANCH-$SHORT_SHA)"
          fi
        id: set_env
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ares.roke.to
          username: ${{ secrets.ROKETO_DEPLOYER_USER }}
          key: ${{ secrets.ROKETO_DEPLOYER_KEY }}
          port: 22
          source: "./docker-compose.yml"
          target: "~/tmp/"
      - name: deploy
        uses: fifsky/ssh-action@master
        env:
          APP: ${{ matrix.app }}
          APP_HOSTNAME: api.roke.to
          APP_NAME: ${{ steps.set_env.outputs.app_name }}
          APP_TAG: ${{ steps.set_env.outputs.app_tag }}
          REG: ${{ matrix.registry }}
        with:
          command: |
            export APP=${{env.APP}}
            export APP_HOSTNAME=${{env.APP_HOSTNAME}}
            export APP_NAME=${{env.APP_NAME}}
            export APP_TAG=${{env.APP_TAG}}
            export REG=${{ matrix.registry }}
            export ROKETO_CONTRACT_NAME=streaming.r-v2.near
            export VAULT_CONTRACT_NAME=vault-roketo.near
            export NEAR_NETWORK_ID=mainnet
            export NEAR_NODE_URL=https://rpc.mainnet.near.org
            export NEAR_WALLET_URL=https://wallet.near.org
            export API_HOST=https://api.roke.to
            export DAPP_HOST=https://app2.roke.to
            export DATABASE_URL="postgres://mainuser:ltkfqhfjnescnhtt@34.67.148.83:5432/roketo"
            export DB_CONNSTRING="postgres://mainuser:ltkfqhfjnescnhtt@34.67.148.83:5432/roketo"
            export INDEXER_DB_URL="postgres://wallet:82LMpaiB7%252TbpMY@104.196.236.163/mainnet_explorer"
            export DISABLE_DATABASE_SSL=true
            mkdir -p ~/services/$APP_HOSTNAME/
            mv ~/tmp/docker-compose.yml ~/services/$APP_HOSTNAME/docker-compose.yml
            cd ~/services/$APP_HOSTNAME
            docker-compose down
            docker-compose up -d
            export text='service '$APP_NAME' updated with url: '$APP_HOSTNAME
            . ~/services/sucess.sh
          host: ares.roke.to
          user: ${{ secrets.ROKETO_DEPLOYER_USER }}
          key: ${{ secrets.ROKETO_DEPLOYER_KEY }}
          args: "-tt"

  success:
    needs:
      - build
      - publish

    runs-on:
      - self-hosted
      - Linux

    steps:
      - run: echo "Done"
